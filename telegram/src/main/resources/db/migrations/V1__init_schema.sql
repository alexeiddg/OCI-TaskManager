CREATE TABLE app_user (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    username VARCHAR2(50) NOT NULL UNIQUE,
    telegram_id VARCHAR2(100) UNIQUE,
    role VARCHAR2(20) NOT NULL,
    manager_id NUMBER,
    team_id NUMBER,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Self-referencing FK (manager)
ALTER TABLE app_user
    ADD CONSTRAINT fk_app_user_manager
        FOREIGN KEY (manager_id) REFERENCES app_user(id);

-- FK to team (assumes table `teams` exists)
ALTER TABLE app_user
    ADD CONSTRAINT fk_app_user_team
        FOREIGN KEY (team_id) REFERENCES teams(id);

CREATE TABLE projects (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    project_name VARCHAR2(255) NOT NULL,
    project_description VARCHAR2(1000) NOT NULL,
    manager_id NUMBER,
    is_active NUMBER(1),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

ALTER TABLE projects
    ADD CONSTRAINT fk_projects_manager
        FOREIGN KEY (manager_id) REFERENCES app_user(id);

CREATE TABLE teams (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    team_name VARCHAR2(100) NOT NULL UNIQUE,
    manager_id NUMBER,
    project_id NUMBER NOT NULL,
    is_active NUMBER(1),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    CONSTRAINT fk_team_manager FOREIGN KEY (manager_id) REFERENCES app_user(id),
    CONSTRAINT fk_team_project FOREIGN KEY (project_id) REFERENCES projects(id)
);

CREATE TABLE sprints (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    sprint_name VARCHAR2(255) NOT NULL,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    project_id NUMBER NOT NULL,
    completed_tasks NUMBER,
    total_tasks NUMBER,
    completion_rate FLOAT,
    is_active NUMBER(1),
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    CONSTRAINT fk_sprint_project FOREIGN KEY (project_id) REFERENCES projects(id)
);

CREATE TABLE tasks (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    sprint_id NUMBER NOT NULL,
    task_name VARCHAR2(255) NOT NULL,
    task_description CLOB NOT NULL,
    priority VARCHAR2(20) NOT NULL,
    status VARCHAR2(20) NOT NULL,
    type VARCHAR2(20) NOT NULL,
    story_points NUMBER NOT NULL,
    blocked NUMBER(1),
    due_date TIMESTAMP,
    completed_at TIMESTAMP,
    created_by NUMBER,
    assigned_to NUMBER,
    is_active NUMBER(1),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

ALTER TABLE tasks
    ADD CONSTRAINT fk_task_sprint
        FOREIGN KEY (sprint_id) REFERENCES sprints(id);

ALTER TABLE tasks
    ADD CONSTRAINT fk_task_created_by
        FOREIGN KEY (created_by) REFERENCES app_user(id);

ALTER TABLE tasks
    ADD CONSTRAINT fk_task_assigned_to
        FOREIGN KEY (assigned_to) REFERENCES app_user(id);